# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.

"""Tests for MODULE_NAME module."""

from unittest import mock

from oslo_config import cfg
from oslotest import base

from PROJECT_NAME import exception
from PROJECT_NAME import MODULE_NAME


CONF = cfg.CONF


class TestResourceManager(base.BaseTestCase):
    """Test cases for ResourceManager class."""

    def setUp(self):
        """Set up test fixtures."""
        super(TestResourceManager, self).setUp()
        self.mock_session = mock.MagicMock()
        self.manager = MODULE_NAME.ResourceManager(
            session=self.mock_session
        )

    def test_get_resource_success(self):
        """Test successful resource retrieval."""
        resource_id = 'test-resource-123'
        expected_resource = mock.MagicMock()
        expected_resource.id = resource_id
        expected_resource.name = 'test-resource'

        self.mock_session.query.return_value.filter_by.return_value.first\
            .return_value = expected_resource

        result = self.manager.get_resource(resource_id)

        self.assertEqual(expected_resource, result)
        self.mock_session.query.assert_called_once()

    def test_get_resource_not_found(self):
        """Test resource retrieval when resource doesn't exist."""
        resource_id = 'nonexistent-resource'

        self.mock_session.query.return_value.filter_by.return_value.first\
            .return_value = None

        self.assertRaises(
            MODULE_NAME.ResourceNotFoundError,
            self.manager.get_resource,
            resource_id
        )

    def test_get_resource_invalid_id(self):
        """Test resource retrieval with invalid ID."""
        self.assertRaises(
            ValueError,
            self.manager.get_resource,
            ''
        )

    def test_create_resource_success(self):
        """Test successful resource creation."""
        name = 'new-resource'
        properties = {'key': 'value'}

        mock_resource = mock.MagicMock()
        mock_resource.id = 'created-resource-id'

        with mock.patch.object(
            self.manager,
            '_save_to_database',
            autospec=True,
            return_value=mock_resource
        ) as mock_save:
            result = self.manager.create_resource(name, properties)

            self.assertEqual(mock_resource, result)
            mock_save.assert_called_once()
            call_args = mock_save.call_args[0][0]
            self.assertEqual(name, call_args['name'])
            self.assertEqual(properties, call_args['properties'])

    def test_create_resource_invalid_name(self):
        """Test resource creation with invalid name."""
        self.assertRaises(
            ValueError,
            self.manager.create_resource,
            ''
        )

        self.assertRaises(
            ValueError,
            self.manager.create_resource,
            None
        )

    def test_update_resource_success(self):
        """Test successful resource update."""
        resource_id = 'test-resource-123'
        updates = {'status': 'ACTIVE'}

        mock_resource = mock.MagicMock()
        mock_resource.id = resource_id

        with mock.patch.object(
            self.manager,
            'get_resource',
            autospec=True,
            return_value=mock_resource
        ):
            result = self.manager.update_resource(resource_id, updates)

            self.assertEqual(mock_resource, result)
            mock_resource.update.assert_called_once_with(updates)
            self.mock_session.add.assert_called_once_with(mock_resource)

    def test_update_resource_not_found(self):
        """Test updating a non-existent resource."""
        resource_id = 'nonexistent'
        updates = {'status': 'ACTIVE'}

        with mock.patch.object(
            self.manager,
            'get_resource',
            autospec=True,
            side_effect=MODULE_NAME.ResourceNotFoundError(
                resource_id=resource_id
            )
        ):
            self.assertRaises(
                MODULE_NAME.ResourceNotFoundError,
                self.manager.update_resource,
                resource_id,
                updates
            )

    def test_delete_resource_success(self):
        """Test successful resource deletion."""
        resource_id = 'test-resource-123'
        mock_resource = mock.MagicMock()

        with mock.patch.object(
            self.manager,
            'get_resource',
            autospec=True,
            return_value=mock_resource
        ):
            result = self.manager.delete_resource(resource_id)

            self.assertTrue(result)
            self.mock_session.delete.assert_called_once_with(mock_resource)

    def test_delete_resource_not_found(self):
        """Test deleting a non-existent resource."""
        resource_id = 'nonexistent'

        with mock.patch.object(
            self.manager,
            'get_resource',
            autospec=True,
            side_effect=MODULE_NAME.ResourceNotFoundError(
                resource_id=resource_id
            )
        ):
            self.assertRaises(
                MODULE_NAME.ResourceNotFoundError,
                self.manager.delete_resource,
                resource_id
            )


class TestResourceBatchProcessing(base.BaseTestCase):
    """Test cases for batch processing functions."""

    @mock.patch.object(MODULE_NAME, '_process_single_resource', autospec=True)
    def test_process_resource_batch_success(self, mock_process):
        """Test successful batch processing."""
        resource_ids = ['id1', 'id2', 'id3']
        mock_process.return_value = {'status': 'success'}

        results = MODULE_NAME.process_resource_batch(resource_ids)

        self.assertEqual(3, len(results))
        self.assertEqual(3, mock_process.call_count)

    @mock.patch.object(MODULE_NAME, '_process_single_resource', autospec=True)
    def test_process_resource_batch_with_errors(self, mock_process):
        """Test batch processing with some failures."""
        resource_ids = ['id1', 'id2', 'id3']

        # First call succeeds, second fails, third succeeds
        mock_process.side_effect = [
            {'status': 'success'},
            Exception("Processing error"),
            {'status': 'success'}
        ]

        results = MODULE_NAME.process_resource_batch(resource_ids)

        self.assertEqual(3, len(results))
        self.assertIsNotNone(results[1].get('error'))


class TestExceptionClasses(base.BaseTestCase):
    """Test cases for custom exception classes."""

    def test_module_error_message_formatting(self):
        """Test ModuleError message formatting."""
        error = MODULE_NAME.ModuleError(reason="test failure")
        self.assertIn("test failure", str(error))

    def test_resource_not_found_error_formatting(self):
        """Test ResourceNotFoundError message formatting."""
        resource_id = 'missing-resource-123'
        error = MODULE_NAME.ResourceNotFoundError(resource_id=resource_id)
        self.assertIn(resource_id, str(error))
