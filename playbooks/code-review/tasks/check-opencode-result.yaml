---
# Reusable task for checking OpenCode command results
#
# This task file consolidates the error handling pattern used across
# all OpenCode command executions (context extraction, commit analysis,
# and code review). It displays output on success, provides detailed
# diagnostics on failure, and validates that output files were created.
#
# Required variables:
#   - command_result: registered result from shell command
#   - command_name: human-readable name (e.g., "context extraction")
#   - agent_name: agent used (e.g., "zuul-context-extractor")
#   - output_file: expected output file path
#   - model_name: model used for this command

- name: "Verify {{ command_name }} output file was created"
  stat:
    path: "{{ output_file }}"
  register: output_file_stat

- name: "Check if {{ command_name }} output file exists"
  fail:
    msg: |
      OpenCode {{ command_name }} command failed to produce expected output file
      after {{ command_result.attempts | default(1) }} attempt(s).

      Expected output file: {{ output_file }}

      ⚠️  TRANSIENT ERROR DETECTED (retries exhausted):
      The output file was never created, indicating a temporary issue with:
      - OpenCode command execution
      - File system or directory initialization
      - LiteLLM proxy or model response
      - Network connectivity

      Consider:
      - Checking OpenCode and LiteLLM proxy logs
      - Verifying file system and directory permissions
      - Checking network connectivity
      - Re-running the job

      Command output:
      STDOUT:
      {{ command_result.stdout | default('(empty)') }}

      STDERR:
      {{ command_result.stderr | default('(empty)') }}
  when: not output_file_stat.stat.exists

- name: "Display {{ command_name }} success"
  debug:
    msg: "✓ {{ command_name | capitalize }} completed successfully. Output at {{ output_file }}"
  when: output_file_stat.stat.exists
